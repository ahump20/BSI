<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üèà NFL Analytics | Blaze Sports Intel</title>
    <meta name="description" content="Real-time NFL standings, team statistics, and advanced analytics powered by SportsDataIO.">

    <!-- Fonts & Icons -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

    <!-- React -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

    <style>
        :root {
            --blaze-burnt-orange: #BF5700;
            --blaze-ember: #CC6600;
            --blaze-copper: #D97B38;
            --dark-charcoal: #0D0D12;
            --dark-slate: #161620;
            --dark-graphite: #1F1F2E;
            --glass-light: rgba(191, 87, 0, 0.08);
            --glass-border: rgba(191, 87, 0, 0.25);
            --text-primary: #FFFFFF;
            --text-secondary: rgba(255, 255, 255, 0.92);
            --text-tertiary: rgba(255, 235, 215, 0.75);
        }

        * { margin: 0; padding: 0; box-sizing: border-box; }

        body {
            font-family: 'Inter', system-ui, sans-serif;
            background: linear-gradient(135deg, #0D0D12 0%, #161620 50%, #0D0D12 100%);
            color: var(--text-primary);
            min-height: 100vh;
        }

        .header {
            background: var(--dark-graphite);
            border-bottom: 2px solid var(--blaze-burnt-orange);
            padding: 20px 40px;
            position: sticky;
            top: 0;
            z-index: 100;
            backdrop-filter: blur(10px);
        }

        .header-content {
            max-width: 1400px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            font-size: 1.5rem;
            font-weight: 800;
            color: var(--blaze-ember);
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .nav-links {
            display: flex;
            gap: 30px;
            align-items: center;
        }

        .nav-link {
            color: var(--text-secondary);
            text-decoration: none;
            font-weight: 500;
            transition: color 0.2s;
        }

        .nav-link:hover {
            color: var(--blaze-ember);
        }

        .nav-link.active {
            color: var(--blaze-ember);
            border-bottom: 2px solid var(--blaze-ember);
            padding-bottom: 4px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 40px 20px;
        }

        .hero {
            text-align: center;
            margin-bottom: 60px;
            padding: 60px 20px;
            background: linear-gradient(135deg, rgba(191, 87, 0, 0.1) 0%, transparent 100%);
            border-radius: 16px;
        }

        .hero h1 {
            font-size: 3.5rem;
            font-weight: 900;
            background: linear-gradient(135deg, var(--blaze-burnt-orange), var(--blaze-copper));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 20px;
        }

        .hero-subtitle {
            font-size: 1.3rem;
            color: var(--text-tertiary);
            max-width: 800px;
            margin: 0 auto;
        }

        .tabs {
            display: flex;
            gap: 20px;
            margin-bottom: 40px;
            border-bottom: 2px solid var(--glass-border);
            overflow-x: auto;
        }

        .tab {
            padding: 15px 30px;
            background: transparent;
            border: none;
            color: var(--text-tertiary);
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
            border-bottom: 3px solid transparent;
            white-space: nowrap;
        }

        .tab:hover {
            color: var(--text-primary);
        }

        .tab.active {
            color: var(--blaze-ember);
            border-bottom-color: var(--blaze-ember);
        }

        .card {
            background: var(--glass-light);
            border: 1px solid var(--glass-border);
            border-radius: 12px;
            padding: 30px;
            margin-bottom: 30px;
            backdrop-filter: blur(10px);
        }

        .card-title {
            font-size: 1.8rem;
            font-weight: 700;
            color: var(--blaze-ember);
            margin-bottom: 25px;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .standings-table {
            width: 100%;
            border-collapse: collapse;
        }

        .standings-table th {
            background: var(--dark-graphite);
            padding: 15px;
            text-align: left;
            font-weight: 600;
            color: var(--blaze-copper);
            border-bottom: 2px solid var(--blaze-burnt-orange);
        }

        .standings-table td {
            padding: 15px;
            border-bottom: 1px solid var(--glass-border);
            color: var(--text-secondary);
        }

        .standings-table tr:hover {
            background: var(--glass-light);
        }

        .team-name {
            font-weight: 600;
            color: var(--text-primary);
        }

        .stat-highlight {
            color: var(--blaze-ember);
            font-weight: 700;
        }

        .loading {
            text-align: center;
            padding: 60px 20px;
            color: var(--text-tertiary);
        }

        .loading i {
            font-size: 3rem;
            color: var(--blaze-burnt-orange);
            animation: spin 2s linear infinite;
        }

        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        .error {
            background: rgba(220, 38, 38, 0.1);
            border: 1px solid rgba(220, 38, 38, 0.3);
            color: #FCA5A5;
            padding: 20px;
            border-radius: 8px;
            margin: 20px 0;
        }

        .data-source {
            font-size: 0.9rem;
            color: var(--text-tertiary);
            margin-top: 20px;
            padding-top: 15px;
            border-top: 1px solid var(--glass-border);
        }

        @media (max-width: 768px) {
            .hero h1 { font-size: 2.5rem; }
            .header { padding: 15px 20px; }
            .nav-links { gap: 15px; }
            .standings-table { font-size: 0.9rem; }
            .standings-table th, .standings-table td { padding: 10px; }
        }
    </style>
</head>
<body>
    <header class="header">
        <div class="header-content">
            <a href="/" class="logo">
                <i class="fas fa-fire"></i>
                BLAZE SPORTS INTEL
            </a>
            <nav class="nav-links">
                <a href="/mlb" class="nav-link">‚öæ MLB</a>
                <a href="/nfl" class="nav-link active">üèà NFL</a>
                <a href="/cfb" class="nav-link">üéì CFB</a>
                <a href="/cbb" class="nav-link">üèÄ CBB</a>
                <a href="/analytics.html" class="nav-link">üìä Analytics</a>
            </nav>
        </div>
    </header>

    <div class="container">
        <div class="hero">
            <h1>üèà NFL Intelligence</h1>
            <p class="hero-subtitle">
                Real-time NFL standings, team statistics, and advanced analytics powered by ESPN
            </p>
        </div>

        <div id="root"></div>
    </div>

    <script type="text/babel">
        const { useState, useEffect } = React;

        function NFLDashboard() {
            const [activeTab, setActiveTab] = useState('standings');
            const [teams, setTeams] = useState([]);
            const [selectedTeam, setSelectedTeam] = useState(null);
            const [schedule, setSchedule] = useState([]);
            const [loading, setLoading] = useState(true);
            const [error, setError] = useState(null);

            useEffect(() => {
                if (activeTab === 'teams') {
                    fetchTeams();
                } else if (activeTab === 'schedule') {
                    fetchSchedule();
                }
            }, [activeTab]);

            const fetchTeams = async () => {
                setLoading(true);
                setError(null);
                try {
                    const response = await fetch('/api/nfl/teams');
                    if (!response.ok) throw new Error('Failed to fetch teams');
                    const data = await response.json();
                    setTeams(data.teams || []);
                    setLoading(false);
                } catch (err) {
                    console.error('Error fetching teams:', err);
                    setError(err.message);
                    setLoading(false);
                }
            };

            const fetchSchedule = async () => {
                setLoading(true);
                setError(null);
                try {
                    // Fetch current week games
                    const response = await fetch('/api/nfl/scoreboard?week=1');
                    if (!response.ok) throw new Error('Failed to fetch schedule');
                    const data = await response.json();
                    setSchedule(data.games || []);
                    setLoading(false);
                } catch (err) {
                    console.error('Error fetching schedule:', err);
                    setError(err.message);
                    setLoading(false);
                }
            };

            const renderStandings = () => {
                return (
                    <div className="card">
                        <h2 className="card-title">
                            <i className="fas fa-trophy"></i>
                            NFL Standings
                        </h2>
                        <p style={{ color: 'var(--text-tertiary)', marginBottom: '20px' }}>
                            NFL standings will be available during the regular season
                        </p>
                        <div style={{ background: 'var(--dark-slate)', padding: '30px', borderRadius: '8px', textAlign: 'center' }}>
                            <i className="fas fa-football-ball" style={{ fontSize: '3rem', color: 'var(--blaze-ember)', marginBottom: '15px' }}></i>
                            <p style={{ color: 'var(--text-secondary)' }}>
                                Real-time standings and playoff picture coming soon
                            </p>
                        </div>
                    </div>
                );
            };

            const renderTeams = () => {
                if (loading) {
                    return (
                        <div className="loading">
                            <i className="fas fa-football-ball"></i>
                            <p style={{ marginTop: '20px' }}>Loading NFL teams...</p>
                        </div>
                    );
                }

                if (error) {
                    return (
                        <div className="error">
                            <strong>‚ö†Ô∏è Data Unavailable</strong>
                            <p>{error}</p>
                        </div>
                    );
                }

                // Group teams by conference/division
                const divisions = {
                    'AFC East': [],
                    'AFC North': [],
                    'AFC South': [],
                    'AFC West': [],
                    'NFC East': [],
                    'NFC North': [],
                    'NFC South': [],
                    'NFC West': []
                };

                teams.forEach(team => {
                    const divName = `${team.conference || 'AFC'} ${team.division || 'East'}`;
                    if (divisions[divName]) {
                        divisions[divName].push(team);
                    }
                });

                return (
                    <div>
                        {Object.keys(divisions).map(division => (
                            divisions[division].length > 0 && (
                                <div key={division} className="card">
                                    <h2 className="card-title">
                                        <i className="fas fa-football-ball"></i>
                                        {division}
                                    </h2>
                                    <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(250px, 1fr))', gap: '15px' }}>
                                        {divisions[division].sort((a, b) => a.name.localeCompare(b.name)).map(team => (
                                            <div
                                                key={team.id}
                                                style={{
                                                    background: `linear-gradient(135deg, #${team.color}22 0%, var(--dark-slate) 100%)`,
                                                    padding: '20px',
                                                    borderRadius: '8px',
                                                    border: '1px solid var(--glass-border)',
                                                    cursor: 'pointer',
                                                    transition: 'all 0.2s'
                                                }}
                                                onMouseOver={(e) => e.currentTarget.style.borderColor = `#${team.color}`}
                                                onMouseOut={(e) => e.currentTarget.style.borderColor = 'var(--glass-border)'}
                                            >
                                                {team.logos && team.logos[0] && (
                                                    <img
                                                        src={team.logos[0].href}
                                                        alt={team.name}
                                                        style={{ width: '60px', height: '60px', marginBottom: '10px', objectFit: 'contain' }}
                                                    />
                                                )}
                                                <div className="team-name" style={{ fontSize: '1.1rem', marginBottom: '5px' }}>
                                                    {team.name}
                                                </div>
                                                <div style={{ color: 'var(--text-tertiary)', fontSize: '0.9rem' }}>
                                                    {team.abbreviation}
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            )
                        ))}
                        <div className="card">
                            <div className="data-source">
                                <i className="fas fa-database"></i> Data Source: ESPN NFL API via blazesportsintel.com/api ‚Ä¢
                                Last Updated: {new Date().toLocaleString('en-US', { timeZone: 'America/Chicago' })} CDT
                            </div>
                        </div>
                    </div>
                );
            };

            const renderPlayers = () => {
                return (
                    <div className="card">
                        <h2 className="card-title">
                            <i className="fas fa-star"></i>
                            Player Statistics
                        </h2>
                        <p style={{ color: 'var(--text-tertiary)', marginBottom: '20px' }}>
                            NFL player statistics and advanced metrics coming soon
                        </p>
                        <div style={{ background: 'var(--dark-slate)', padding: '30px', borderRadius: '8px', textAlign: 'center' }}>
                            <i className="fas fa-users" style={{ fontSize: '3rem', color: 'var(--blaze-ember)', marginBottom: '15px' }}></i>
                            <p style={{ color: 'var(--text-secondary)' }}>
                                QB ratings, receiver metrics, defensive stats, and more
                            </p>
                        </div>
                    </div>
                );
            };

            const renderSchedule = () => {
                if (loading) {
                    return (
                        <div className="loading">
                            <i className="fas fa-calendar"></i>
                            <p style={{ marginTop: '20px' }}>Loading NFL schedule...</p>
                        </div>
                    );
                }

                if (error) {
                    return (
                        <div className="error">
                            <strong>‚ö†Ô∏è Data Unavailable</strong>
                            <p>{error}</p>
                        </div>
                    );
                }

                return (
                    <div className="card">
                        <h2 className="card-title">
                            <i className="fas fa-calendar-day"></i>
                            Week 1 Schedule
                        </h2>
                        <div style={{ display: 'grid', gap: '15px' }}>
                            {schedule.map((game, idx) => {
                                const isComplete = game.status?.completed;
                                const isLive = game.status?.type === 'STATUS_IN_PROGRESS';
                                const homeTeam = game.teams?.find(t => t.homeAway === 'home');
                                const awayTeam = game.teams?.find(t => t.homeAway === 'away');

                                return (
                                    <div
                                        key={game.id || idx}
                                        style={{
                                            background: 'var(--dark-slate)',
                                            padding: '20px',
                                            borderRadius: '8px',
                                            border: `1px solid ${isLive ? '#10b981' : 'var(--glass-border)'}`,
                                            display: 'flex',
                                            justifyContent: 'space-between',
                                            alignItems: 'center'
                                        }}
                                    >
                                        <div style={{ flex: 1 }}>
                                            <div style={{ display: 'flex', alignItems: 'center', gap: '10px', marginBottom: '10px' }}>
                                                <span className="team-name">{awayTeam?.team?.displayName || 'TBD'}</span>
                                                {isComplete && awayTeam?.winner && (
                                                    <i className="fas fa-check-circle" style={{ color: '#10b981' }}></i>
                                                )}
                                                <span className="stat-highlight" style={{ marginLeft: 'auto' }}>
                                                    {awayTeam?.score ?? '-'}
                                                </span>
                                            </div>
                                            <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
                                                <span className="team-name">{homeTeam?.team?.displayName || 'TBD'}</span>
                                                {isComplete && homeTeam?.winner && (
                                                    <i className="fas fa-check-circle" style={{ color: '#10b981' }}></i>
                                                )}
                                                <span className="stat-highlight" style={{ marginLeft: 'auto' }}>
                                                    {homeTeam?.score ?? '-'}
                                                </span>
                                            </div>
                                        </div>
                                        <div style={{ marginLeft: '30px', textAlign: 'right' }}>
                                            <div style={{
                                                color: isLive ? '#10b981' : isComplete ? 'var(--text-tertiary)' : 'var(--blaze-ember)',
                                                fontWeight: '600',
                                                marginBottom: '5px'
                                            }}>
                                                {game.status?.detail || 'Scheduled'}
                                            </div>
                                            <div style={{ color: 'var(--text-tertiary)', fontSize: '0.9rem' }}>
                                                {new Date(game.date).toLocaleDateString('en-US', {
                                                    month: 'short',
                                                    day: 'numeric',
                                                    hour: 'numeric',
                                                    minute: '2-digit',
                                                    timeZone: 'America/Chicago'
                                                })} CDT
                                            </div>
                                        </div>
                                    </div>
                                );
                            })}
                        </div>
                        <div className="data-source">
                            <i className="fas fa-database"></i> Data Source: ESPN NFL API via blazesportsintel.com/api ‚Ä¢
                            Last Updated: {new Date().toLocaleString('en-US', { timeZone: 'America/Chicago' })} CDT
                        </div>
                    </div>
                );
            };

            return (
                <div>
                    <div className="tabs">
                        <button
                            className={`tab ${activeTab === 'standings' ? 'active' : ''}`}
                            onClick={() => setActiveTab('standings')}
                        >
                            <i className="fas fa-list-ol"></i> Standings
                        </button>
                        <button
                            className={`tab ${activeTab === 'teams' ? 'active' : ''}`}
                            onClick={() => setActiveTab('teams')}
                        >
                            <i className="fas fa-users"></i> Teams
                        </button>
                        <button
                            className={`tab ${activeTab === 'players' ? 'active' : ''}`}
                            onClick={() => setActiveTab('players')}
                        >
                            <i className="fas fa-user"></i> Players
                        </button>
                        <button
                            className={`tab ${activeTab === 'schedule' ? 'active' : ''}`}
                            onClick={() => setActiveTab('schedule')}
                        >
                            <i className="fas fa-calendar"></i> Schedule
                        </button>
                    </div>

                    {activeTab === 'standings' && renderStandings()}
                    {activeTab === 'teams' && renderTeams()}
                    {activeTab === 'players' && renderPlayers()}
                    {activeTab === 'schedule' && renderSchedule()}
                </div>
            );
        }

        ReactDOM.render(<NFLDashboard />, document.getElementById('root'));
    </script>

    <!-- Universal Footer -->
    <div id="footer-container"></div>
    <script src="/lib/footer.js"></script>
</body>
</html>
