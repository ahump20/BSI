{
  "name": "feature-engineering-mcp",
  "version": "1.0.0",
  "description": "MCP server providing ML feature engineering context for Blaze Sports Intel development with feature definitions, validation, and calculation templates",
  "author": "Blaze Sports Intel",
  "license": "MIT",

  "server": {
    "command": "node",
    "args": ["server.js"],
    "env": {
      "NODE_ENV": "production"
    }
  },

  "capabilities": {
    "resources": true,
    "tools": true,
    "prompts": false
  },

  "resources": [
    {
      "uri": "features://catalog",
      "name": "Feature Catalog",
      "description": "Complete catalog of all ML features across all sports organized by category",
      "mimeType": "application/json",
      "updateFrequency": "on_feature_changes"
    },
    {
      "uri": "features://schema",
      "name": "Feature Schema",
      "description": "JSON schema definition for validating feature definitions",
      "mimeType": "application/json",
      "updateFrequency": "static"
    },
    {
      "uri": "features://baseball/catalog",
      "name": "Baseball Features",
      "description": "All baseball features including Pythagorean wins, bullpen fatigue, wOBA, and advanced metrics",
      "mimeType": "application/json",
      "updateFrequency": "on_feature_changes"
    },
    {
      "uri": "features://football/catalog",
      "name": "Football Features",
      "description": "All football features including EPA per play, success rate, pressure-to-sack rate, and defensive metrics",
      "mimeType": "application/json",
      "updateFrequency": "on_feature_changes"
    },
    {
      "uri": "features://basketball/catalog",
      "name": "Basketball Features",
      "description": "All basketball features including true shooting percentage, usage rate, and efficiency metrics",
      "mimeType": "application/json",
      "updateFrequency": "on_feature_changes"
    }
  ],

  "tools": [
    {
      "name": "get_feature",
      "description": "Get detailed feature definition including formula, validation rules, sources, and implementation details",
      "inputSchema": {
        "type": "object",
        "properties": {
          "feature_id": {
            "type": "string",
            "description": "Feature ID in format {sport}_{feature_name} (e.g., baseball_pythagorean_win_pct)"
          }
        },
        "required": ["feature_id"]
      },
      "examples": [
        {
          "input": {
            "feature_id": "baseball_pythagorean_win_pct"
          },
          "description": "Get Pythagorean win percentage feature definition"
        },
        {
          "input": {
            "feature_id": "football_epa_per_play"
          },
          "description": "Get Expected Points Added per play feature definition"
        },
        {
          "input": {
            "feature_id": "basketball_ts_percentage"
          },
          "description": "Get True Shooting Percentage feature definition"
        }
      ]
    },
    {
      "name": "validate_feature",
      "description": "Validate feature definition against schema checking required fields, data types, and constraints",
      "inputSchema": {
        "type": "object",
        "properties": {
          "feature_definition": {
            "type": "object",
            "description": "Feature definition object to validate against schema"
          }
        },
        "required": ["feature_definition"]
      },
      "examples": [
        {
          "input": {
            "feature_definition": {
              "feature_id": "baseball_new_metric",
              "display_name": "New Metric",
              "sport": "baseball",
              "category": "offensive",
              "data_type": "float",
              "formula": "example_formula"
            }
          },
          "description": "Validate a new feature definition before adding to catalog"
        }
      ]
    },
    {
      "name": "search_features",
      "description": "Search features by sport, category, or keyword with flexible filtering",
      "inputSchema": {
        "type": "object",
        "properties": {
          "sport": {
            "type": "string",
            "enum": ["baseball", "football", "basketball"],
            "description": "Filter by sport"
          },
          "category": {
            "type": "string",
            "enum": ["team_performance", "player_performance", "advanced_metrics", "predictive", "situational", "momentum", "defensive", "offensive"],
            "description": "Filter by category"
          },
          "keyword": {
            "type": "string",
            "description": "Search keyword in feature names, descriptions, and formulas"
          }
        }
      },
      "examples": [
        {
          "input": {
            "sport": "baseball",
            "category": "offensive"
          },
          "description": "Find all baseball offensive features"
        },
        {
          "input": {
            "keyword": "percentage"
          },
          "description": "Search for features with 'percentage' in name or description"
        },
        {
          "input": {
            "sport": "football",
            "keyword": "defensive"
          },
          "description": "Find football features related to defense"
        }
      ]
    },
    {
      "name": "get_calculation",
      "description": "Get calculation template and implementation guide for feature in specified programming language",
      "inputSchema": {
        "type": "object",
        "properties": {
          "feature_id": {
            "type": "string",
            "description": "Feature ID to get calculation template for"
          },
          "language": {
            "type": "string",
            "enum": ["python", "javascript", "sql"],
            "description": "Programming language for template (default: python)"
          }
        },
        "required": ["feature_id"]
      },
      "examples": [
        {
          "input": {
            "feature_id": "baseball_bullpen_fatigue_index",
            "language": "python"
          },
          "description": "Get Python implementation template for bullpen fatigue calculation"
        },
        {
          "input": {
            "feature_id": "football_success_rate",
            "language": "javascript"
          },
          "description": "Get JavaScript implementation template for success rate calculation"
        }
      ]
    },
    {
      "name": "list_dependencies",
      "description": "Get feature dependencies including required data columns, code packages, and data sources",
      "inputSchema": {
        "type": "object",
        "properties": {
          "feature_id": {
            "type": "string",
            "description": "Feature ID to analyze dependencies"
          }
        },
        "required": ["feature_id"]
      },
      "examples": [
        {
          "input": {
            "feature_id": "baseball_woba"
          },
          "description": "Get all dependencies for weighted on-base average calculation"
        },
        {
          "input": {
            "feature_id": "football_pressure_to_sack_rate"
          },
          "description": "Get required data columns and sources for pressure-to-sack rate"
        }
      ]
    }
  ],

  "features": {
    "totalCount": 8,
    "byCategory": {
      "team_performance": ["baseball_pythagorean_win_pct"],
      "predictive": ["baseball_bullpen_fatigue_index"],
      "offensive": ["baseball_woba", "football_success_rate", "basketball_ts_percentage"],
      "advanced_metrics": ["football_epa_per_play"],
      "defensive": ["football_pressure_to_sack_rate"],
      "player_performance": ["basketball_usage_rate"]
    },
    "bySport": {
      "baseball": 3,
      "football": 3,
      "basketball": 2
    }
  },

  "schema": {
    "version": "1.0.0",
    "requiredFields": ["feature_id", "display_name", "sport", "category", "data_type", "formula"],
    "optionalFields": ["description", "validation", "sources", "implementation"],
    "validationRules": {
      "feature_id": "Pattern: ^[a-z]+_[a-z_]+$",
      "sport": "Enum: baseball, football, basketball",
      "category": "Enum: team_performance, player_performance, advanced_metrics, predictive, situational, momentum, defensive, offensive",
      "data_type": "Enum: float, int, bool, string",
      "validation.range": "Array with exactly 2 numbers [min, max]",
      "sources.type": "Enum: peer_reviewed, statistical_method, proprietary"
    }
  },

  "settings": {
    "validation": {
      "strictMode": true,
      "validateFormulas": false,
      "requireSources": true
    },
    "calculations": {
      "defaultLanguage": "python",
      "includeValidation": true,
      "includeExamples": true
    },
    "search": {
      "caseSensitive": false,
      "searchFields": ["display_name", "description", "formula", "category"]
    }
  },

  "usage": {
    "installation": {
      "steps": [
        "1. Navigate to .claude/mcp-servers/feature-engineering-mcp/",
        "2. Run: npm install @modelcontextprotocol/sdk",
        "3. Add server to claude_desktop_config.json:",
        "   {",
        "     \"mcpServers\": {",
        "       \"features\": {",
        "         \"command\": \"node\",",
        "         \"args\": [\"/Users/AustinHumphrey/BSI/.claude/mcp-servers/feature-engineering-mcp/server.js\"]",
        "       }",
        "     }",
        "   }",
        "4. Restart Claude Desktop"
      ]
    },
    "examples": [
      {
        "description": "Get feature definition in Claude Code",
        "command": "Use the features MCP server to get the baseball_pythagorean_win_pct feature definition",
        "expected": "Returns complete feature definition with formula, validation rules, sources, and implementation details"
      },
      {
        "description": "Search for offensive features",
        "command": "Search for offensive features across all sports using the features MCP server",
        "expected": "Returns list of all features in the offensive category with names and descriptions"
      },
      {
        "description": "Get Python calculation template",
        "command": "Get a Python calculation template for baseball_bullpen_fatigue_index",
        "expected": "Returns complete Python function template with docstring, validation, and usage example"
      },
      {
        "description": "Validate new feature definition",
        "command": "Validate this new feature definition against the schema",
        "expected": "Returns validation result with list of errors if any required fields are missing or invalid"
      },
      {
        "description": "List feature dependencies",
        "command": "List all dependencies for football_epa_per_play feature",
        "expected": "Returns data columns needed, code packages required, and source citations"
      }
    ]
  },

  "dependencies": {
    "@modelcontextprotocol/sdk": "^0.5.0"
  },

  "repository": {
    "type": "git",
    "url": "https://github.com/ahump20/BSI"
  },

  "bugs": {
    "url": "https://github.com/ahump20/BSI/issues"
  },

  "keywords": [
    "mcp",
    "model-context-protocol",
    "feature-engineering",
    "machine-learning",
    "sports-analytics",
    "baseball",
    "football",
    "basketball",
    "pythagorean-wins",
    "bullpen-fatigue",
    "epa",
    "true-shooting",
    "blaze-sports-intel"
  ]
}
