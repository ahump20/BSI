generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Division {
  D1
  D2
  D3
  JUCO
  NAIA
}

enum SeasonType {
  REGULAR
  POSTSEASON
  EXHIBITION
}

enum Sport {
  BASEBALL
  FOOTBALL
  BASKETBALL
  SOFTBALL
}

enum GameStatus {
  SCHEDULED
  LIVE
  FINAL
  POSTPONED
  DELAYED
  SUSPENDED
  CANCELLED
}

enum InningHalf {
  TOP
  BOTTOM
}

enum FeedPrecision {
  EVENT
  PITCH
  PLAY
}

enum Position {
  P
  SP
  RP
  C
  IF
  OF
  DH
  UTL
}

enum HandedEnum {
  R
  L
  S
}

enum AcademicYear {
  FR
  SO
  JR
  SR
  GR
  RS
}

enum ArticleType {
  RECAP
  PREVIEW
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PollType {
  COACHES
  BASEBALL_AMERICA
  D1BASEBALL
  PERFECT_GAME
  NCBWA
  USA_TODAY
  COLLEGIATE_BASEBALL
  COMPOSITE
}

enum GameSide {
  HOME
  AWAY
}

model Conference {
  id              String    @id @default(cuid())
  externalId      String?   @unique
  name            String
  slug            String    @unique
  shortName       String?
  abbreviation    String?
  division        Division  @default(D1)
  region          String?
  establishedYear Int?
  tournamentBids  Int?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  teams           Team[]
  games           Game[]

  @@index([division])
  @@index([slug])
}

model Team {
  id             String    @id @default(cuid())
  externalId     String?   @unique
  name           String
  slug           String    @unique
  school         String
  nickname       String?
  abbreviation   String?
  mascot         String?
  city           String?
  state          String?
  primaryColor   String?
  secondaryColor String?
  logoUrl        String?
  foundedYear    Int?
  sport          Sport     @default(BASEBALL)
  division       Division  @default(D1)
  conferenceId   String?
  active         Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  conference     Conference? @relation(fields: [conferenceId], references: [id])
  players        Player[]
  teamStats      TeamStats[]
  homeGames      Game[]    @relation("HomeTeam")
  awayGames      Game[]    @relation("AwayTeam")
  playerStats    PlayerStats[]
  boxLines       BoxLine[]
  rankings       Ranking[]

  @@index([conferenceId])
  @@index([division])
  @@index([sport])
}

model Player {
  id            String        @id @default(cuid())
  externalId    String?       @unique
  teamId        String?
  firstName     String
  lastName      String
  preferredName String?
  jerseyNumber  String?
  position      Position      @default(UTL)
  bats          HandedEnum?
  throws        HandedEnum?
  height        Int?
  weight        Int?
  hometown      String?
  homeState     String?
  highSchool    String?
  year          AcademicYear?
  birthDate     DateTime?
  draftYear     Int?
  draftRound    Int?
  draftPick     Int?
  draftTeam     String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  team          Team?         @relation(fields: [teamId], references: [id])
  playerStats   PlayerStats[]
  boxLines      BoxLine[]
  batterEvents  Event[]       @relation("BatterEvents")
  pitcherEvents Event[]       @relation("PitcherEvents")

  @@index([teamId])
  @@index([lastName])
}

model Game {
  id                String        @id @default(cuid())
  externalId        String?       @unique
  season            Int
  seasonType        SeasonType    @default(REGULAR)
  sport             Sport         @default(BASEBALL)
  division          Division      @default(D1)
  scheduledAt       DateTime
  status            GameStatus    @default(SCHEDULED)
  conferenceId      String?
  homeTeamId        String
  awayTeamId        String
  homeScore         Int?
  awayScore         Int?
  venueId           String?
  attendance        Int?
  weather           String?
  temperatureF      Int?
  broadcast         String?
  currentInning     Int?
  currentInningHalf InningHalf?
  balls             Int?
  strikes           Int?
  outs              Int?
  providerName      String?
  feedPrecision     FeedPrecision @default(EVENT)
  lastUpdated       DateTime?
  archived          Boolean       @default(false)
  archivedAt        DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  conference        Conference?   @relation(fields: [conferenceId], references: [id])
  homeTeam          Team          @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeam          Team          @relation("AwayTeam", fields: [awayTeamId], references: [id])
  venue             Venue?        @relation(fields: [venueId], references: [id])
  events            Event[]
  boxLines          BoxLine[]
  articles          Article[]

  @@index([season])
  @@index([status])
  @@index([scheduledAt])
  @@index([homeTeamId])
  @@index([awayTeamId])
}

model Venue {
  id        String    @id @default(cuid())
  externalId String?  @unique
  name      String
  city      String?
  state     String?
  country   String?
  capacity  Int?
  latitude  Float?
  longitude Float?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  games     Game[]
}

model Event {
  id          String     @id @default(cuid())
  gameId      String
  sequence    Int
  timestamp   DateTime?  @default(now())
  inning      Int
  inningHalf  InningHalf
  outs        Int
  description String
  eventType   String
  batterId    String?
  pitcherId   String?
  homeScore   Int?
  awayScore   Int?
  homeWinProb Float?
  wpaSwing    Float?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  game        Game       @relation(fields: [gameId], references: [id])
  batter      Player?    @relation("BatterEvents", fields: [batterId], references: [id])
  pitcher     Player?    @relation("PitcherEvents", fields: [pitcherId], references: [id])

  @@index([gameId, sequence])
}

model BoxLine {
  id                 String    @id @default(cuid())
  gameId             String
  teamId             String
  playerId           String
  side               GameSide
  battingOrder       Int?
  positionPlayed     Position?
  atBats             Int       @default(0)
  runs               Int       @default(0)
  hits               Int       @default(0)
  doubles            Int       @default(0)
  triples            Int       @default(0)
  homeRuns           Int       @default(0)
  rbi                Int       @default(0)
  walks              Int       @default(0)
  strikeouts         Int       @default(0)
  hitByPitch         Int       @default(0)
  sacrificeFlies     Int       @default(0)
  sacrificeBunts     Int       @default(0)
  stolenBases        Int       @default(0)
  caughtStealing     Int       @default(0)
  totalBases         Int       @default(0)
  inningsPitched     Decimal?  @db.Decimal(4, 1)
  hitsAllowed        Int?
  runsAllowed        Int?
  earnedRuns         Int?
  walksAllowed       Int?
  strikeoutsRecorded Int?
  pitchCount         Int?
  decision           String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  game               Game      @relation(fields: [gameId], references: [id])
  team               Team      @relation(fields: [teamId], references: [id])
  player             Player    @relation(fields: [playerId], references: [id])

  @@unique([gameId, playerId, side])
  @@index([teamId])
}

model TeamStats {
  id              String    @id @default(cuid())
  teamId          String
  season          Int
  wins            Int       @default(0)
  losses          Int       @default(0)
  confWins        Int       @default(0)
  confLosses      Int       @default(0)
  homeWins        Int       @default(0)
  homeLosses      Int       @default(0)
  awayWins        Int       @default(0)
  awayLosses      Int       @default(0)
  gamesPlayed     Int       @default(0)
  runsScored      Int       @default(0)
  runsAllowed     Int       @default(0)
  hitsTotal       Int       @default(0)
  doubles         Int       @default(0)
  triples         Int       @default(0)
  homeRuns        Int       @default(0)
  stolenBases     Int       @default(0)
  battingAvg      Float?
  onBasePct       Float?
  sluggingPct     Float?
  earnedRuns      Int       @default(0)
  hitsAllowed     Int       @default(0)
  strikeouts      Int       @default(0)
  walks           Int       @default(0)
  era             Float?
  whip            Float?
  fieldingPct     Float?
  rpi             Float?
  strengthOfSched Float?
  pythagWins      Float?
  lastUpdated     DateTime?  @default(now())
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  team            Team       @relation(fields: [teamId], references: [id])

  @@unique([teamId, season])
  @@index([season])
}

model PlayerStats {
  id                 String    @id @default(cuid())
  playerId           String
  teamId             String?
  season             Int
  gamesPlayed        Int       @default(0)
  atBats             Int       @default(0)
  runs               Int       @default(0)
  hits               Int       @default(0)
  doubles            Int       @default(0)
  triples            Int       @default(0)
  homeRuns           Int       @default(0)
  rbi                Int       @default(0)
  walks              Int       @default(0)
  strikeouts         Int       @default(0)
  stolenBases        Int       @default(0)
  caughtStealing     Int       @default(0)
  battingAvg         Float?
  onBasePct          Float?
  sluggingPct        Float?
  gamesPitched       Int       @default(0)
  gamesStarted       Int       @default(0)
  wins               Int       @default(0)
  losses             Int       @default(0)
  saves              Int       @default(0)
  inningsPitched     Decimal?  @db.Decimal(5, 1)
  hitsAllowed        Int       @default(0)
  runsAllowed        Int       @default(0)
  earnedRuns         Int       @default(0)
  walksAllowed       Int       @default(0)
  strikeoutsRecorded Int       @default(0)
  homeRunsAllowed    Int       @default(0)
  era                Float?
  whip               Float?
  strikeoutsPerNine  Float?
  walksPerNine       Float?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  player             Player    @relation(fields: [playerId], references: [id])
  team               Team?     @relation(fields: [teamId], references: [id])

  @@unique([playerId, season])
  @@index([teamId])
  @@index([season])
}

model Ranking {
  id               String    @id @default(cuid())
  pollType         PollType
  season           Int
  week             Int
  rank             Int
  teamId           String
  previousRank     Int?
  points           Int?
  firstPlaceVotes  Int?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  team             Team      @relation(fields: [teamId], references: [id])

  @@unique([pollType, season, week, teamId])
  @@index([season, week])
}

model Article {
  id                 String        @id @default(cuid())
  gameId             String
  type               ArticleType
  status             ArticleStatus @default(PUBLISHED)
  title              String
  summary            String
  content            String
  provider           String
  model              String?
  tokensUsed         Int?
  factCheckScore     Float?
  factCheckResults   String?
  wordCount          Int
  readingTimeMinutes Int
  publishedAt        DateTime?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  game               Game          @relation(fields: [gameId], references: [id])

  @@index([gameId])
  @@index([type])
}
