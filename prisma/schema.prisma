// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Division {
  D1
  D2
  D3
  JUCO
}

enum Sport {
  NFL
  MLB
  CFB
  CBB
}

enum GameStatus {
  SCHEDULED
  LIVE
  FINAL
  POSTPONED
  CANCELLED
}

enum Position {
  P
  C
  IF1B
  IF2B
  IF3B
  IFSS
  OF
  DH
  UTIL
}

enum HandedEnum {
  L
  R
  S
}

enum AcademicYear {
  FR
  SO
  JR
  SR
  GS
}

enum PollType {
  AP
  COACHES
  COMPOSITE
  CFP
  RPI
}

model Conference {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  shortName   String?
  division    Division
  sport       Sport    @default(CBB)
  teams       Team[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Team {
  id             String      @id @default(cuid())
  slug           String      @unique
  name           String
  abbreviation   String?
  city           String?
  state          String?
  school         String?
  mascot         String?
  conference     Conference? @relation(fields: [conferenceId], references: [id])
  conferenceId   String?
  sport          Sport       @default(CBB)
  division       Division    @default(D1)
  logoUrl        String?
  primaryColor   String?
  secondaryColor String?
  homeGames      Game[]      @relation("HomeTeam")
  awayGames      Game[]      @relation("AwayTeam")
  players        Player[]
  rankings       Ranking[]
  teamStats      TeamStats[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model Player {
  id           String        @id @default(cuid())
  slug         String        @unique
  firstName    String
  lastName     String
  fullName     String
  team         Team?         @relation(fields: [teamId], references: [id])
  teamId       String?
  position     String?
  bats         String?
  throws       String?
  year         String?
  jerseyNumber Int?
  height       String?
  weight       Int?
  classYear    String?
  hometown     String?
  highSchool   String?
  photoUrl     String?
  playerStats  PlayerStats[]
  boxLines     BoxLine[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Game {
  id             String      @id @default(cuid())
  slug           String      @unique
  scheduledAt    DateTime
  status         String
  homeTeam       Team        @relation("HomeTeam", fields: [homeTeamId], references: [id])
  homeTeamId     String
  awayTeam       Team        @relation("AwayTeam", fields: [awayTeamId], references: [id])
  awayTeamId     String
  homeScore      Int?
  awayScore      Int?
  venueId        String?
  venueName      String?
  currentInning  Int?
  season         Int
  events         GameEvent[]
  boxLines       BoxLine[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model GameEvent {
  id           String   @id @default(cuid())
  game         Game     @relation(fields: [gameId], references: [id])
  gameId       String
  sequence     Int
  inning       Int
  inningHalf   String?
  halfInning   String?
  outs         Int?
  homeWinProb  Float?
  wpaSwing     Float?
  description  String
  eventType    String
  timestamp    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model BoxLine {
  id            String   @id @default(cuid())
  game          Game     @relation(fields: [gameId], references: [id])
  gameId        String
  player        Player   @relation(fields: [playerId], references: [id])
  playerId      String
  side          String   // "HOME" or "AWAY"
  // Batting stats
  ab            Int?
  r             Int?
  h             Int?
  rbi           Int?
  bb            Int?
  so            Int?
  // Pitching stats
  ip            Float?
  hitsAllowed   Int?
  runsAllowed   Int?
  earnedRuns    Int?
  bbAllowed     Int?
  soRecorded    Int?
  decision      String?  // W, L, S, etc.
  points        Int?     // For other sports
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model PlayerStats {
  id                String   @id @default(cuid())
  player            Player   @relation(fields: [playerId], references: [id])
  playerId          String
  season            Int
  // Batting stats
  gamesPlayed       Int      @default(0)
  atBats            Int      @default(0)
  runs              Int      @default(0)
  hits              Int      @default(0)
  doubles           Int      @default(0)
  triples           Int      @default(0)
  homeRuns          Int      @default(0)
  rbi               Int      @default(0)
  walks             Int      @default(0)
  strikeouts        Int      @default(0)
  stolenBases       Int      @default(0)
  caughtStealing    Int      @default(0)
  battingAvg        Float?
  onBasePct         Float?
  sluggingPct       Float?
  // Pitching stats
  gamesPitched      Int      @default(0)
  gamesStarted      Int      @default(0)
  wins              Int      @default(0)
  losses            Int      @default(0)
  saves             Int      @default(0)
  inningsPitched    Float    @default(0)
  hitsAllowed       Int      @default(0)
  runsAllowed       Int      @default(0)
  earnedRuns        Int      @default(0)
  walksAllowed      Int      @default(0)
  homeRunsAllowed   Int      @default(0)
  era               Float?
  whip              Float?
  strikeoutsPerNine Float?
  walksPerNine      Float?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([playerId, season])
}

model Ranking {
  id               String   @id @default(cuid())
  team             Team     @relation(fields: [teamId], references: [id])
  teamId           String
  season           Int
  week             Int
  pollType         String
  rank             Int
  previousRank     Int?
  votes            Int?
  points           Int?
  firstPlaceVotes  Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([teamId, season, week, pollType])
}

model TeamStats {
  id              String   @id @default(cuid())
  team            Team     @relation(fields: [teamId], references: [id])
  teamId          String
  season          Int
  wins            Int      @default(0)
  losses          Int      @default(0)
  confWins        Int      @default(0)
  confLosses      Int      @default(0)
  homeWins        Int      @default(0)
  homeLosses      Int      @default(0)
  awayWins        Int      @default(0)
  awayLosses      Int      @default(0)
  runsScored      Int      @default(0)
  runsAllowed     Int      @default(0)
  points          Int      @default(0)
  hitsTotal       Int      @default(0)
  homeRuns        Int      @default(0)
  stolenBases     Int      @default(0)
  battingAvg      Float?
  onBasePct       Float?
  sluggingPct     Float?
  era             Float?
  whip            Float?
  earnedRuns      Int      @default(0)
  hitsAllowed     Int      @default(0)
  strikeouts      Int      @default(0)
  walks           Int      @default(0)
  fieldingPct     Float?
  rpi             Float?
  strengthOfSched Float?
  pythagWins      Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([teamId, season])
}
