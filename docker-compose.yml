version: '3.8'

services:
  # PostgreSQL for athlete data and analysis results
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-blaze_biomech}
      POSTGRES_USER: ${POSTGRES_USER:-blaze}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-blaze2024!}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U blaze"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for real-time pose data streaming and caching
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # MinIO for S3-compatible video/pose data storage
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-blazeadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-blaze2024secure!}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Main API service
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://blaze:blaze2024!@postgres:5432/blaze_biomech
      REDIS_URL: redis://redis:6379
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: blazeadmin
      S3_SECRET_KEY: blaze2024secure!
      S3_BUCKET: pose-data
      ENIGMA_ENGINE_URL: ${ENIGMA_ENGINE_URL:-http://mock-enigma:8080}
      PYTHONUNBUFFERED: 1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./api:/app
      - ./sample_data:/sample_data
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Pose processing worker
  processor:
    build:
      context: ./processor
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://blaze:blaze2024!@postgres:5432/blaze_biomech
      REDIS_URL: redis://redis:6379
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: blazeadmin
      S3_SECRET_KEY: blaze2024secure!
      GPU_ENABLED: ${GPU_ENABLED:-false}
      WORKER_CONCURRENCY: ${WORKER_CONCURRENCY:-4}
    depends_on:
      - postgres
      - redis
      - minio
    volumes:
      - ./processor:/app
      - ./sample_data:/sample_data
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2G

  # Frontend dashboard
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_URL: http://localhost:8000
      REACT_APP_WS_URL: ws://localhost:8000/ws
    depends_on:
      - api
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm start

  # Mock Enigma Engine for development
  mock-enigma:
    image: mockserver/mockserver:latest
    ports:
      - "8080:1080"
    environment:
      MOCKSERVER_PROPERTY_FILE: /config/mockserver.properties
      MOCKSERVER_INITIALIZATION_JSON_PATH: /config/enigma-mock.json
    volumes:
      - ./tests/mocks:/config

  # Grafana for monitoring
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-blaze2024!}
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

volumes:
  postgres_data:
  redis_data:
  minio_data:
  grafana_data:
  prometheus_data:

networks:
  default:
    name: blaze-network
    driver: bridge
