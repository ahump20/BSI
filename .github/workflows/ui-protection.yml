name: UI Protection & API Separation Guardrails

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'index.html'
      - 'css/**'
      - 'js/**'
      - 'apps/web/**'
      - 'context7-enhanced/**'
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

env:
  TZ: America/Chicago
  BLAZE_ENV: production

jobs:
  ui-protection:
    name: UI Protection Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: üîç Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: üõ°Ô∏è Check for UI Changes in API-Only PRs
      id: ui_check
      run: |
        # Check if PR is labeled as API-only
        if [ "${{ contains(github.event.pull_request.labels.*.name, 'api-only') }}" == "true" ]; then
          echo "üîç Checking for UI changes in API-only PR..."
          
          # Get changed files
          changed_files=$(git diff --name-only origin/main...HEAD)
          
          # Check for UI-related changes
          ui_files=$(echo "$changed_files" | grep -E '\.(html|css|js|tsx|ts)$' | grep -v 'context7-enhanced/src/tools/' | grep -v 'context7-enhanced/__tests__/' || true)
          
          if [ -n "$ui_files" ]; then
            echo "‚ùå UI changes detected in API-only PR:"
            echo "$ui_files"
            echo "ui_changes=true" >> $GITHUB_OUTPUT
            echo "ui_files<<EOF" >> $GITHUB_OUTPUT
            echo "$ui_files" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ No UI changes detected in API-only PR"
            echo "ui_changes=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "‚ÑπÔ∏è PR not labeled as API-only, skipping UI protection check"
          echo "ui_changes=false" >> $GITHUB_OUTPUT
        fi

    - name: üé® Validate Brand Color Consistency
      id: brand_check
      run: |
        # Check for unauthorized color changes
        brand_colors=("#1a1a1a" "#ff6b00" "#0066cc" "#ffffff" "#2d2d2d")
        changed_files=$(git diff --name-only origin/main...HEAD)
        
        for file in $(echo "$changed_files" | grep -E '\.(css|html)$' || true); do
          echo "üîç Checking $file for brand color changes..."
          
          # Check for unauthorized color changes
          for color in "${brand_colors[@]}"; do
            if git diff origin/main...HEAD -- "$file" | grep -q "$color"; then
              echo "‚ö†Ô∏è Brand color $color modified in $file"
              echo "brand_changes=true" >> $GITHUB_OUTPUT
            fi
          done
        done
        
        if [ -z "$(echo "$brand_changes" | grep true)" ]; then
          echo "‚úÖ No unauthorized brand color changes detected"
          echo "brand_changes=false" >> $GITHUB_OUTPUT
        fi

    - name: üìö Context7 Integration Validation
      id: context7_check
      run: |
        # Ensure Context7 tools are properly used
        if git diff --name-only origin/main...HEAD | grep -q "context7-enhanced/src/tools/"; then
          echo "üîç Validating Context7 tool changes..."
          
          # Check that changes follow Context7 patterns
          changed_tools=$(git diff --name-only origin/main...HEAD | grep "context7-enhanced/src/tools/" || true)
          
          for tool in $changed_tools; do
            echo "üìã Validating $tool..."
            
            # Check for proper Zod schema usage
            if ! git diff origin/main...HEAD -- "$tool" | grep -q "z\."; then
              echo "‚ùå $tool missing Zod validation"
              echo "validation_failed=true" >> $GITHUB_OUTPUT
            fi
            
            # Check for proper export structure
            if ! git diff origin/main...HEAD -- "$tool" | grep -q "export const tools"; then
              echo "‚ùå $tool missing proper tools export"
              echo "validation_failed=true" >> $GITHUB_OUTPUT
            fi
          done
          
          if [ -z "$(echo "$validation_failed" | grep true)" ]; then
            echo "‚úÖ Context7 tool changes are valid"
            echo "validation_failed=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "‚ÑπÔ∏è No Context7 tool changes detected"
          echo "validation_failed=false" >> $GITHUB_OUTPUT
        fi

    - name: üö´ Block PR if UI Changes Detected
      if: steps.ui_check.outputs.ui_changes == 'true'
      run: |
        echo "‚ùå BLOCKING: UI changes detected in API-only PR"
        echo ""
        echo "The following UI files were modified:"
        echo "${{ steps.ui_check.outputs.ui_files }}"
        echo ""
        echo "üîß To fix this:"
        echo "1. Remove UI changes from this PR"
        echo "2. Create a separate PR for UI changes with 'ui-changes' label"
        echo "3. Or remove the 'api-only' label if UI changes are intentional"
        echo ""
        echo "üìã Allowed files for API-only PRs:"
        echo "- context7-enhanced/src/tools/*.ts"
        echo "- context7-enhanced/__tests__/contracts/*.spec.ts"
        echo "- Any files in /api/ directory"
        echo "- Configuration files (context7.json, etc.)"
        
        exit 1

    - name: üö´ Block PR if Brand Colors Modified
      if: steps.brand_check.outputs.brand_changes == 'true'
      run: |
        echo "‚ùå BLOCKING: Unauthorized brand color changes detected"
        echo ""
        echo "üîß Brand colors are locked and require design review:"
        echo "- Primary: #1a1a1a (Dark)"
        echo "- Secondary: #ff6b00 (Orange)"
        echo "- Accent: #0066cc (Blue)"
        echo "- Background: #2d2d2d (Dark Gray)"
        echo "- Text: #ffffff (White)"
        echo ""
        echo "üìã To modify brand colors:"
        echo "1. Create a separate PR with 'design-review' label"
        echo "2. Include design justification in PR description"
        echo "3. Get approval from design team"
        
        exit 1

    - name: üö´ Block PR if Context7 Validation Failed
      if: steps.context7_check.outputs.validation_failed == 'true'
      run: |
        echo "‚ùå BLOCKING: Context7 integration validation failed"
        echo ""
        echo "üîß Context7 tools must:"
        echo "1. Use Zod schemas for input/output validation"
        echo "2. Export tools object with proper structure"
        echo "3. Follow the established patterns in existing tools"
        echo ""
        echo "üìã Reference implementations:"
        echo "- context7-enhanced/src/tools/docs.ts"
        echo "- context7-enhanced/src/tools/sportsContext.ts"
        echo "- context7-enhanced/src/tools/cache.ts"
        
        exit 1

    - name: ‚úÖ Approve PR
      if: steps.ui_check.outputs.ui_changes == 'false' && steps.brand_check.outputs.brand_changes == 'false' && steps.context7_check.outputs.validation_failed == 'false'
      run: |
        echo "‚úÖ UI Protection checks passed"
        echo "PR is safe to proceed with API changes"

    - name: üìù Comment on PR
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const uiChanges = '${{ steps.ui_check.outputs.ui_changes }}' === 'true';
          const brandChanges = '${{ steps.brand_check.outputs.brand_changes }}' === 'true';
          const validationFailed = '${{ steps.context7_check.outputs.validation_failed }}' === 'true';
          
          let comment = '## üõ°Ô∏è UI Protection Analysis\n\n';
          
          if (uiChanges || brandChanges || validationFailed) {
            comment += '‚ùå **BLOCKED** - UI protection violations detected\n\n';
            
            if (uiChanges) {
              comment += '### UI Changes in API-Only PR\n';
              comment += 'UI files were modified in a PR labeled as API-only.\n\n';
            }
            
            if (brandChanges) {
              comment += '### Unauthorized Brand Color Changes\n';
              comment += 'Brand colors were modified without design review.\n\n';
            }
            
            if (validationFailed) {
              comment += '### Context7 Validation Failed\n';
              comment += 'Context7 tool changes do not follow established patterns.\n\n';
            }
            
            comment += 'Please fix the issues above before this PR can be merged.';
          } else {
            comment += '‚úÖ **APPROVED** - All UI protection checks passed\n\n';
            comment += 'This PR is safe to proceed with API changes.';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });