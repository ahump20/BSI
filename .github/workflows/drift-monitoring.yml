name: Blaze Intelligence Data Drift Monitoring

on:
  schedule:
    # Run nightly at 2 AM CT (8 AM UTC)
    - cron: '0 8 * * *'
  push:
    branches: [ main ]
    paths:
      - 'data/**'
      - 'api/**'
      - 'models/**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      override_drift:
        description: 'Override drift failures'
        required: false
        default: 'false'
      generate_report:
        description: 'Generate full drift report'
        required: false
        default: 'true'

env:
  TZ: America/Chicago
  BLAZE_ENV: production

jobs:
  drift-detection:
    name: Data Drift Detection
    runs-on: ubuntu-latest
    env:
      CLOUDFLARE_ANALYTICS_ENABLED: 'false'  # Enable later when proper ingestion is implemented

    steps:
    - name: üèà Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for baseline comparisons

    - name: üêç Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: üì¶ Install Dependencies
      run: |
        set -euo pipefail
        pip install -r observability/drift/requirements.txt
        pip install pandas numpy scipy pyyaml redis plotly jinja2

    - name: üîß Setup Node.js (for Cloudflare)
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: ‚òÅÔ∏è Install Wrangler
      run: |
        set -euo pipefail
        npm install -g wrangler@3
        wrangler --version

    - name: üßÆ Determine Drift Override (dispatch input or PR label)
      id: determine_override
      run: |
        set -euo pipefail
        EFFECTIVE="${{ github.event.inputs.override_drift || 'false' }}"
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          if jq -r '.pull_request.labels[].name' "$GITHUB_EVENT_PATH" 2>/dev/null | grep -qi '^drift-override$'; then
            echo "PR label 'drift-override' present -> overriding drift gate";
            EFFECTIVE="true"
          fi
        fi
        echo "effective_override=$EFFECTIVE" >> $GITHUB_OUTPUT
        echo "Drift override effective: $EFFECTIVE"

    - name: üíæ Restore Baseline Cache
      uses: actions/cache@v4
      with:
        path: observability/drift/baselines
        key: drift-baselines-${{ runner.os }}-${{ hashFiles('observability/drift/config/drift-config.yaml') }}
        restore-keys: |
          drift-baselines-${{ runner.os }}-

    - name: üîç Run Schema Drift Detection
      id: schema_drift
      run: |
        set -euo pipefail
        echo "Running schema drift detection..."
        python observability/drift/drift_detector.py --schema-only
      continue-on-error: true

    - name: üìä Run Statistical Drift Detection
      id: statistical_drift
      env:
        CACHE_BASELINES: true
        DRIFT_OVERRIDE: ${{ steps.determine_override.outputs.effective_override }}
      run: |
        set -euo pipefail
        echo "Running statistical drift detection (override=${DRIFT_OVERRIDE})..."
        ./observability/drift/ci_drift_gate.sh
      continue-on-error: true

    - name: üìà Generate Drift Report
      if: github.event.inputs.generate_report == 'true' || github.event_name == 'schedule'
      run: |
        set -euo pipefail
        echo "Generating drift report..."
        python observability/drift/drift_detector.py --generate-report

    - name: üìù Create GitHub Issues for Critical Drift
      if: steps.statistical_drift.outcome == 'failure'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = 'observability/drift/ci/drift_results.json';
          if (!fs.existsSync(path)) {
            core.warning('No drift_results.json found, skipping issue creation');
            return;
          }
          const driftResults = JSON.parse(fs.readFileSync(path, 'utf8'));
          for (const result of driftResults) {
            if (result.severity === 'CRITICAL') {
              const title = `[DRIFT] Critical drift in ${result.dataset}.${result.column}`;
              const search = await github.rest.search.issuesAndPullRequests({
                q: `repo:${context.repo.owner}/${context.repo.repo} in:title "${title}" state:open`
              });
              if (search.data.total_count > 0) {
                core.info(`Issue already exists for ${title}, skipping.`);
                continue;
              }
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title,
                body: `## üö® Critical Data Drift Detected\n\n` +
                      `**Dataset:** ${result.dataset}\n` +
                      `**Column:** ${result.column}\n` +
                      `**Test:** ${result.test_type}\n` +
                      `**Statistic:** ${Number(result.statistic).toFixed(4)}\n` +
                      `**Threshold:** ${Number(result.threshold).toFixed(4)}\n\n` +
                      `[View Full Report](https://blazesportsintel.com/observability/drift/reports/)`,
                labels: ['drift-detection', 'data-quality', 'critical'],
                assignees: ['ahump20']
              });
            }
          }

    - name: üì§ Upload Drift Reports to Cloudflare R2
      if: always()
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      run: |
        set -euo pipefail
        if [ -z "${CLOUDFLARE_API_TOKEN}" ] || [ -z "${CLOUDFLARE_ACCOUNT_ID}" ]; then
          echo "Cloudflare credentials missing; skipping R2 upload"; exit 0; fi
        if [ ! -d "observability/drift/reports" ]; then
          echo "No reports directory; skipping R2 upload"; exit 0; fi
        if ! find observability/drift/reports -type f -print -quit | grep -q .; then
          echo "No report files found; skipping R2 upload"; exit 0; fi
        echo "Uploading drift reports to R2 (per-file)..."
        while IFS= read -r -d '' f; do
          rel=${f#observability/drift/reports/}
          echo "Uploading $rel"
          wrangler r2 object put "blaze-drift-reports/$(date +%Y%m%d)/$rel" --file="$f"
        done < <(find observability/drift/reports -type f -print0)
        echo "R2 upload complete"

    - name: üìä Update Cloudflare Analytics (disabled placeholder)
      if: always() && env.CLOUDFLARE_ANALYTICS_ENABLED == 'true'
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      run: |
        set -euo pipefail
        echo "Analytics ingestion disabled (CLOUDFLARE_ANALYTICS_ENABLED=false). Skipping."

    - name: üíæ Save Baseline Cache
      if: success() && github.event_name == 'schedule'
      uses: actions/cache@v4
      with:
        path: observability/drift/baselines
        key: drift-baselines-${{ runner.os }}-${{ hashFiles('observability/drift/config/drift-config.yaml') }}

    - name: üì¶ Upload Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: drift-reports-${{ github.run_number }}
        path: |
          observability/drift/reports/
          observability/drift/ci/
          observability/drift/logs/
        if-no-files-found: ignore
        retention-days: 7
        compression-level: 6

    - name: üßæ Drift Gate Summary
      if: always()
      run: |
        set -euo pipefail
        SUMMARY_FILE="observability/drift/ci/ci_gate.json"
        if [ -f "$SUMMARY_FILE" ]; then
          echo '--- CI Gate JSON ---'
          cat "$SUMMARY_FILE"
          PASS=$(jq -r '.pass' "$SUMMARY_FILE" || echo 'null')
          CRIT_DRIFTS=$(jq -r '.critical_drifts' "$SUMMARY_FILE" || echo '0')
          SCHEMA_CRIT=$(jq -r '.critical_schema_changes' "$SUMMARY_FILE" || echo '0')
          {
            echo "# Drift Gate Summary";
            echo "Pass: $PASS";
            echo "Critical Drifts: $CRIT_DRIFTS";
            echo "Critical Schema Changes: $SCHEMA_CRIT";
            echo "Override Applied: ${{ steps.determine_override.outputs.effective_override }}";
            echo "Report URL: https://blazesportsintel.com/observability/drift/reports/";
          } >> "$GITHUB_STEP_SUMMARY"
        else
          echo "No ci_gate.json found; skipping summary." >> "$GITHUB_STEP_SUMMARY"
        fi

    - name: üèÅ CI Gate Decision
      if: github.event_name == 'pull_request'
      run: |
        set -euo pipefail
        if [ "${{ steps.statistical_drift.outcome }}" = "failure" ] && [ "${{ steps.determine_override.outputs.effective_override }}" != "true" ]; then
          echo "‚ùå Critical drift detected - blocking PR merge"
          echo "Review drift report at: https://blazesportsintel.com/observability/drift/reports/"
          exit 1
        fi
        echo "‚úÖ Drift checks passed - PR can proceed"

  notification:
    name: Send Notifications
    needs: drift-detection
    if: failure()
    runs-on: ubuntu-latest
    steps:
    - name: üìß Send Email Alert
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: 'üö® Blaze Intelligence - Critical Data Drift Detected'
        to: ahump20@outlook.com
        from: Blaze Intelligence Monitoring
        body: |
          Critical data drift has been detected in the Blaze Intelligence platform.

          View full report: https://blazesportsintel.com/observability/drift/reports/

          This is an automated alert from the championship-caliber monitoring system.